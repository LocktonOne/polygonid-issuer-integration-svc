// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package erc20verifier

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IZKPVerifierZKPRequest is an auto generated low-level Go binding around an user-defined struct.
type IZKPVerifierZKPRequest struct {
	Metadata  string
	Validator common.Address
	Data      []byte
}

// Erc20verifierMetaData contains all meta data concerning the Erc20verifier contract.
var Erc20verifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REQUESTS_RETURN_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_AMOUNT_FOR_AIRDROP_PER_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_REQUEST_ID\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"}],\"name\":\"getZKPRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"contractICircuitValidator\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structIZKPVerifier.ZKPRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getZKPRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"contractICircuitValidator\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structIZKPVerifier.ZKPRequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getZKPRequestsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"proofs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"}],\"name\":\"requestIdExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"contractICircuitValidator\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structIZKPVerifier.ZKPRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"setZKPRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"},{\"internalType\":\"uint256[]\",\"name\":\"inputs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"name\":\"submitZKPResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405262000014620000ba60201b60201c565b60ff16600a6200002591906200031e565b60056200003391906200036f565b61022e553480156200004457600080fd5b5060405162004b4538038062004b4583398181016040528101906200006a919062000563565b818181600390816200007d919062000829565b5080600490816200008f919062000829565b505050620000b2620000a6620000c360201b60201c565b620000cb60201b60201c565b505062000910565b60006012905090565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156200021f57808604811115620001f757620001f662000191565b5b6001851615620002075780820291505b80810290506200021785620001c0565b9450620001d7565b94509492505050565b6000826200023a57600190506200030d565b816200024a57600090506200030d565b81600181146200026357600281146200026e57620002a4565b60019150506200030d565b60ff84111562000283576200028262000191565b5b8360020a9150848211156200029d576200029c62000191565b5b506200030d565b5060208310610133831016604e8410600b8410161715620002de5782820a905083811115620002d857620002d762000191565b5b6200030d565b620002ed8484846001620001cd565b9250905081840481111562000307576200030662000191565b5b81810290505b9392505050565b6000819050919050565b60006200032b8262000314565b9150620003388362000314565b9250620003677fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000228565b905092915050565b60006200037c8262000314565b9150620003898362000314565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620003c557620003c462000191565b5b828202905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200043982620003ee565b810181811067ffffffffffffffff821117156200045b576200045a620003ff565b5b80604052505050565b600062000470620003d0565b90506200047e82826200042e565b919050565b600067ffffffffffffffff821115620004a157620004a0620003ff565b5b620004ac82620003ee565b9050602081019050919050565b60005b83811015620004d9578082015181840152602081019050620004bc565b60008484015250505050565b6000620004fc620004f68462000483565b62000464565b9050828152602081018484840111156200051b576200051a620003e9565b5b62000528848285620004b9565b509392505050565b600082601f830112620005485762000547620003e4565b5b81516200055a848260208601620004e5565b91505092915050565b600080604083850312156200057d576200057c620003da565b5b600083015167ffffffffffffffff8111156200059e576200059d620003df565b5b620005ac8582860162000530565b925050602083015167ffffffffffffffff811115620005d057620005cf620003df565b5b620005de8582860162000530565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200063b57607f821691505b602082108103620006515762000650620005f3565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620006bb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200067c565b620006c786836200067c565b95508019841693508086168417925050509392505050565b6000819050919050565b60006200070a62000704620006fe8462000314565b620006df565b62000314565b9050919050565b6000819050919050565b6200072683620006e9565b6200073e620007358262000711565b84845462000689565b825550505050565b600090565b6200075562000746565b620007628184846200071b565b505050565b5b818110156200078a576200077e6000826200074b565b60018101905062000768565b5050565b601f821115620007d957620007a38162000657565b620007ae846200066c565b81016020851015620007be578190505b620007d6620007cd856200066c565b83018262000767565b50505b505050565b600082821c905092915050565b6000620007fe60001984600802620007de565b1980831691505092915050565b6000620008198383620007eb565b9150826002028217905092915050565b6200083482620005e8565b67ffffffffffffffff81111562000850576200084f620003ff565b5b6200085c825462000622565b620008698282856200078e565b600060209050601f831160018114620008a157600084156200088c578287015190505b6200089885826200080b565b86555062000908565b601f198416620008b18662000657565b60005b82811015620008db57848901518255600182019150602085019450602081019050620008b4565b86831015620008fb5784890151620008f7601f891682620007eb565b8355505b6001600288020188555050505b505050505050565b61422580620009206000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c8063715018a6116100de578063ab7bcfb711610097578063c76d084511610071578063c76d0845146104c3578063cb0e0d7d146104f3578063dd62ed3e14610523578063f2fde38b146105535761018e565b8063ab7bcfb714610447578063b45c0fdf14610477578063b68967e2146104a75761018e565b8063715018a6146103855780638da5cb5b1461038f57806395d89b41146103ad5780639f5223e0146103cb578063a457c2d7146103e7578063a9059cbb146104175761018e565b8063313ce5671161014b57806363ec508f1161012557806363ec508f146102fb5780636508e1b4146103195780637042f36b1461033757806370a08231146103555761018e565b8063313ce5671461027d578063395093511461029b5780635f9e60d7146102cb5761018e565b806306fdde0314610193578063095ea7b3146101b157806318160ddd146101e15780631905e7b1146101ff57806323b872dd1461021d5780632a2d0c471461024d575b600080fd5b61019b61056f565b6040516101a89190612492565b60405180910390f35b6101cb60048036038101906101c69190612552565b610601565b6040516101d891906125ad565b60405180910390f35b6101e9610624565b6040516101f691906125d7565b60405180910390f35b61020761062e565b60405161021491906125d7565b60405180910390f35b610237600480360381019061023291906125f2565b610634565b60405161024491906125ad565b60405180910390f35b61026760048036038101906102629190612645565b610663565b6040516102749190612681565b60405180910390f35b610285610697565b60405161029291906126b8565b60405180910390f35b6102b560048036038101906102b09190612552565b6106a0565b6040516102c291906125ad565b60405180910390f35b6102e560048036038101906102e091906126d3565b6106d7565b6040516102f2919061292a565b60405180910390f35b610303610999565b604051610310919061296f565b60405180910390f35b61032161099e565b60405161032e91906125d7565b60405180910390f35b61033f6109ac565b60405161034c91906125d7565b60405180910390f35b61036f600480360381019061036a919061298a565b6109b3565b60405161037c91906125d7565b60405180910390f35b61038d6109fb565b005b610397610a0f565b6040516103a49190612681565b60405180910390f35b6103b5610a39565b6040516103c29190612492565b60405180910390f35b6103e560048036038101906103e09190612a07565b610acb565b005b61040160048036038101906103fc9190612552565b610b66565b60405161040e91906125ad565b60405180910390f35b610431600480360381019061042c9190612552565b610bdd565b60405161043e91906125ad565b60405180910390f35b610461600480360381019061045c9190612a63565b610c00565b60405161046e91906125ad565b60405180910390f35b610491600480360381019061048c9190612a90565b610c97565b60405161049e91906125ad565b60405180910390f35b6104c160048036038101906104bc9190612b79565b610cc7565b005b6104dd60048036038101906104d89190612a63565b610f45565b6040516104ea9190612c6c565b60405180910390f35b61050d6004803603810190610508919061298a565b611149565b60405161051a91906125d7565b60405180910390f35b61053d60048036038101906105389190612c8e565b611162565b60405161054a91906125d7565b60405180910390f35b61056d6004803603810190610568919061298a565b6111e9565b005b60606003805461057e90612cfd565b80601f01602080910402602001604051908101604052809291908181526020018280546105aa90612cfd565b80156105f75780601f106105cc576101008083540402835291602001916105f7565b820191906000526020600020905b8154815290600101906020018083116105da57829003601f168201915b5050505050905090565b60008061060c61126c565b9050610619818585611274565b600191505092915050565b6000600254905090565b6103e881565b60008061063f61126c565b905061064c85828561143d565b6106578585856114c9565b60019150509392505050565b61022c6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006012905090565b6000806106ab61126c565b90506106cc8185856106bd8589611162565b6106c79190612d5d565b611274565b600191505092915050565b60606000806106f06101fc8054905086866103e8611748565b91509150600082826107029190612d91565b67ffffffffffffffff81111561071b5761071a612dc5565b5b60405190808252806020026020018201604052801561075457816020015b6107416123cb565b8152602001906001900390816107395790505b50905060008390505b8281101561098c576101fb60006101fc838154811061077f5761077e612df4565b5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206040518060600160405290816000820180546107e690612cfd565b80601f016020809104026020016040519081016040528092919081815260200182805461081290612cfd565b801561085f5780601f106108345761010080835404028352916020019161085f565b820191906000526020600020905b81548152906001019060200180831161084257829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546108ce90612cfd565b80601f01602080910402602001604051908101604052809291908181526020018280546108fa90612cfd565b80156109475780601f1061091c57610100808354040283529160200191610947565b820191906000526020600020905b81548152906001019060200180831161092a57829003601f168201915b50505050508152505082858361095d9190612d91565b8151811061096e5761096d612df4565b5b6020026020010181905250808061098490612e23565b91505061075d565b5080935050505092915050565b600181565b60006101fc80549050905090565b61022e5481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610a0361183f565b610a0d60006118bd565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610a4890612cfd565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7490612cfd565b8015610ac15780601f10610a9657610100808354040283529160200191610ac1565b820191906000526020600020905b815481529060010190602001808311610aa457829003601f168201915b5050505050905090565b610ad361183f565b806101fb60008467ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000208181610b08919061344d565b9050506101fc8290806001815401808255809150506001900390600052602060002090600491828204019190066008029091909190916101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050565b600080610b7161126c565b90506000610b7f8286611162565b905083811015610bc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbb906134cd565b60405180910390fd5b610bd18286868403611274565b60019250505092915050565b600080610be861126c565b9050610bf58185856114c9565b600191505092915050565b600080600090505b6101fc80549050811015610c8c578267ffffffffffffffff166101fc8281548110610c3657610c35612df4565b5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff1603610c79576001915050610c92565b8080610c8490612e23565b915050610c08565b50600090505b919050565b6101fa6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff166101fb60008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610d81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d789061355f565b60405180910390fd5b610e1886868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506101fb60008a67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611983565b610e2786868686868633611a9c565b5060016101fa60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610f3d86868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506101fb60008a67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611d88565b505050505050565b610f4d6123cb565b610f5682610c00565b610f95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8c906135cb565b60405180910390fd5b6101fb60008367ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020604051806060016040529081600082018054610fd890612cfd565b80601f016020809104026020016040519081016040528092919081815260200182805461100490612cfd565b80156110515780601f1061102657610100808354040283529160200191611051565b820191906000526020600020905b81548152906001019060200180831161103457829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546110c090612cfd565b80601f01602080910402602001604051908101604052809291908181526020018280546110ec90612cfd565b80156111395780601f1061110e57610100808354040283529160200191611139565b820191906000526020600020905b81548152906001019060200180831161111c57829003601f168201915b5050505050815250509050919050565b61022d6020528060005260406000206000915090505481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6111f161183f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611260576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112579061365d565b60405180910390fd5b611269816118bd565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036112e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112da906136ef565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611352576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134990613781565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161143091906125d7565b60405180910390a3505050565b60006114498484611162565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146114c357818110156114b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ac906137ed565b60405180910390fd5b6114c28484848403611274565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611538576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152f9061387f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159e90613911565b60405180910390fd5b6115b2838383611fcf565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611638576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162f906139a3565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116cb9190612d5d565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161172f91906125d7565b60405180910390a361174284848461208e565b50505050565b6000806000841161178e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178590613a0f565b60405180910390fd5b828411156117d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c890613a7b565b60405180910390fd5b858510611813576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180a90613ae7565b60405180910390fd5b600084866118219190612d5d565b90508681111561182f578690505b8581925092505094509492505050565b61184761126c565b73ffffffffffffffffffffffffffffffffffffffff16611865610a0f565b73ffffffffffffffffffffffffffffffffffffffff16146118bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b290613b53565b60405180910390fd5b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000611a1f838373ffffffffffffffffffffffffffffffffffffffff1663b16a394f6040518163ffffffff1660e01b81526004016119c090613bbf565b602060405180830381865afa1580156119dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a019190613bf4565b81518110611a1257611a11612df4565b5b6020026020010151612093565b90508073ffffffffffffffffffffffffffffffffffffffff16611a4061126c565b73ffffffffffffffffffffffffffffffffffffffff1614611a96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8d90613c93565b60405180910390fd5b50505050565b6000806101fb60008a67ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020604051806060016040529081600082018054611ae290612cfd565b80601f0160208091040260200160405190810160405280929190818152602001828054611b0e90612cfd565b8015611b5b5780601f10611b3057610100808354040283529160200191611b5b565b820191906000526020600020905b815481529060010190602001808311611b3e57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054611bca90612cfd565b80601f0160208091040260200160405190810160405280929190818152602001828054611bf690612cfd565b8015611c435780601f10611c1857610100808354040283529160200191611c43565b820191906000526020600020905b815481529060010190602001808311611c2657829003601f168201915b50505050508152505090506000635307e79f60e01b90506000818a8a8a8a8a8860400151604051602001611c7c96959493929190613e47565b60405160208183030381529060405286604051602001611c9e93929190613f7d565b6040516020818303038152906040529050600080846020015173ffffffffffffffffffffffffffffffffffffffff1683604051611cdb9190613fb6565b6000604051808303816000865af19150503d8060008114611d18576040519150601f19603f3d011682016040523d82523d6000602084013e611d1d565b606091505b509150915081611d7557600081511115611d3a5780518082602001fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6c9061403f565b60405180910390fd5b8195505050505050979650505050505050565b600167ffffffffffffffff168367ffffffffffffffff16148015611df35750600061022d6000611db661126c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b611e32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e29906140d1565b60405180910390fd5b600082600181518110611e4857611e47612df4565b5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff1661022c600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015611f095750600061022d6000611ecc61126c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15611fc957611f22611f1961126c565b61022e546120b5565b8061022d6000611f3061126c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611f7661126c565b61022c600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50505050565b600115156101fa60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514612089576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208090614163565b60405180910390fd5b505050565b505050565b60006120ae6120a96120a484612214565b612360565b6123bd565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612124576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211b906141cf565b60405180910390fd5b61213060008383611fcf565b80600260008282546121429190612d5d565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121979190612d5d565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516121fc91906125d7565b60405180910390a36122106000838361208e565b5050565b600081905060087eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff8216901b60087fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff008316901c17905060107dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff8216901b60107fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff00008316901c17905060207bffffffff00000000ffffffff00000000ffffffff00000000ffffffff8216901b60207fffffffff00000000ffffffff00000000ffffffff00000000ffffffff000000008316901c179050604077ffffffffffffffff0000000000000000ffffffffffffffff8216901b60407fffffffffffffffff0000000000000000ffffffffffffffff00000000000000008316901c179050608081901b608082901c179050919050565b6060602067ffffffffffffffff81111561237d5761237c612dc5565b5b6040519080825280601f01601f1916602001820160405280156123af5781602001600182028036833780820191505090505b509050816020820152919050565b600060148201519050919050565b604051806060016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b600081519050919050565b600082825260208201905092915050565b60005b8381101561243c578082015181840152602081019050612421565b60008484015250505050565b6000601f19601f8301169050919050565b600061246482612402565b61246e818561240d565b935061247e81856020860161241e565b61248781612448565b840191505092915050565b600060208201905081810360008301526124ac8184612459565b905092915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006124e9826124be565b9050919050565b6124f9816124de565b811461250457600080fd5b50565b600081359050612516816124f0565b92915050565b6000819050919050565b61252f8161251c565b811461253a57600080fd5b50565b60008135905061254c81612526565b92915050565b60008060408385031215612569576125686124b4565b5b600061257785828601612507565b92505060206125888582860161253d565b9150509250929050565b60008115159050919050565b6125a781612592565b82525050565b60006020820190506125c2600083018461259e565b92915050565b6125d18161251c565b82525050565b60006020820190506125ec60008301846125c8565b92915050565b60008060006060848603121561260b5761260a6124b4565b5b600061261986828701612507565b935050602061262a86828701612507565b925050604061263b8682870161253d565b9150509250925092565b60006020828403121561265b5761265a6124b4565b5b60006126698482850161253d565b91505092915050565b61267b816124de565b82525050565b60006020820190506126966000830184612672565b92915050565b600060ff82169050919050565b6126b28161269c565b82525050565b60006020820190506126cd60008301846126a9565b92915050565b600080604083850312156126ea576126e96124b4565b5b60006126f88582860161253d565b92505060206127098582860161253d565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061275b82612402565b612765818561273f565b935061277581856020860161241e565b61277e81612448565b840191505092915050565b6000819050919050565b60006127ae6127a96127a4846124be565b612789565b6124be565b9050919050565b60006127c082612793565b9050919050565b60006127d2826127b5565b9050919050565b6127e2816127c7565b82525050565b600081519050919050565b600082825260208201905092915050565b600061280f826127e8565b61281981856127f3565b935061282981856020860161241e565b61283281612448565b840191505092915050565b6000606083016000830151848203600086015261285a8282612750565b915050602083015161286f60208601826127d9565b50604083015184820360408601526128878282612804565b9150508091505092915050565b60006128a0838361283d565b905092915050565b6000602082019050919050565b60006128c082612713565b6128ca818561271e565b9350836020820285016128dc8561272f565b8060005b8581101561291857848403895281516128f98582612894565b9450612904836128a8565b925060208a019950506001810190506128e0565b50829750879550505050505092915050565b6000602082019050818103600083015261294481846128b5565b905092915050565b600067ffffffffffffffff82169050919050565b6129698161294c565b82525050565b60006020820190506129846000830184612960565b92915050565b6000602082840312156129a05761299f6124b4565b5b60006129ae84828501612507565b91505092915050565b6129c08161294c565b81146129cb57600080fd5b50565b6000813590506129dd816129b7565b92915050565b600080fd5b6000606082840312156129fe576129fd6129e3565b5b81905092915050565b60008060408385031215612a1e57612a1d6124b4565b5b6000612a2c858286016129ce565b925050602083013567ffffffffffffffff811115612a4d57612a4c6124b9565b5b612a59858286016129e8565b9150509250929050565b600060208284031215612a7957612a786124b4565b5b6000612a87848285016129ce565b91505092915050565b60008060408385031215612aa757612aa66124b4565b5b6000612ab585828601612507565b9250506020612ac6858286016129ce565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f840112612af557612af4612ad0565b5b8235905067ffffffffffffffff811115612b1257612b11612ad5565b5b602083019150836020820283011115612b2e57612b2d612ada565b5b9250929050565b600081905082602060020282011115612b5157612b50612ada565b5b92915050565b600081905082604060020282011115612b7357612b72612ada565b5b92915050565b6000806000806000806101408789031215612b9757612b966124b4565b5b6000612ba589828a016129ce565b965050602087013567ffffffffffffffff811115612bc657612bc56124b9565b5b612bd289828a01612adf565b95509550506040612be589828a01612b35565b9350506080612bf689828a01612b57565b925050610100612c0889828a01612b35565b9150509295509295509295565b60006060830160008301518482036000860152612c328282612750565b9150506020830151612c4760208601826127d9565b5060408301518482036040860152612c5f8282612804565b9150508091505092915050565b60006020820190508181036000830152612c868184612c15565b905092915050565b60008060408385031215612ca557612ca46124b4565b5b6000612cb385828601612507565b9250506020612cc485828601612507565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612d1557607f821691505b602082108103612d2857612d27612cce565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612d688261251c565b9150612d738361251c565b9250828201905080821115612d8b57612d8a612d2e565b5b92915050565b6000612d9c8261251c565b9150612da78361251c565b9250828203905081811115612dbf57612dbe612d2e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612e2e8261251c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612e6057612e5f612d2e565b5b600182019050919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112612e9757612e96612e6b565b5b80840192508235915067ffffffffffffffff821115612eb957612eb8612e70565b5b602083019250600182023603831315612ed557612ed4612e75565b5b509250929050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612f4a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612f0d565b612f548683612f0d565b95508019841693508086168417925050509392505050565b6000612f87612f82612f7d8461251c565b612789565b61251c565b9050919050565b6000819050919050565b612fa183612f6c565b612fb5612fad82612f8e565b848454612f1a565b825550505050565b600090565b612fca612fbd565b612fd5818484612f98565b505050565b5b81811015612ff957612fee600082612fc2565b600181019050612fdb565b5050565b601f82111561303e5761300f81612ee8565b61301884612efd565b81016020851015613027578190505b61303b61303385612efd565b830182612fda565b50505b505050565b600082821c905092915050565b600061306160001984600802613043565b1980831691505092915050565b600061307a8383613050565b9150826002028217905092915050565b6130948383612edd565b67ffffffffffffffff8111156130ad576130ac612dc5565b5b6130b78254612cfd565b6130c2828285612ffd565b6000601f8311600181146130f157600084156130df578287013590505b6130e9858261306e565b865550613151565b601f1984166130ff86612ee8565b60005b8281101561312757848901358255600182019150602085019450602081019050613102565b868310156131445784890135613140601f891682613050565b8355505b6001600288020188555050505b50505050505050565b61316583838361308a565b505050565b6000613175826124de565b9050919050565b6131858161316a565b811461319057600080fd5b50565b600081356131a08161317c565b80915050919050565b60008160001b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff6131d6846131a9565b9350801983169250808416831791505092915050565b60006131f782612793565b9050919050565b6000613209826131ec565b9050919050565b6000819050919050565b613223826131fe565b61323661322f82613210565b83546131b6565b8255505050565b6000808335600160200384360303811261325a57613259612e6b565b5b80840192508235915067ffffffffffffffff82111561327c5761327b612e70565b5b60208301925060018202360383131561329857613297612e75565b5b509250929050565b600082905092915050565b60008190508160005260206000209050919050565b601f821115613301576132d2816132ab565b6132db84612efd565b810160208510156132ea578190505b6132fe6132f685612efd565b830182612fda565b50505b505050565b61331083836132a0565b67ffffffffffffffff81111561332957613328612dc5565b5b6133338254612cfd565b61333e8282856132c0565b6000601f83116001811461336d576000841561335b578287013590505b613365858261306e565b8655506133cd565b601f19841661337b866132ab565b60005b828110156133a35784890135825560018201915060208501945060208101905061337e565b868310156133c057848901356133bc601f891682613050565b8355505b6001600288020188555050505b50505050505050565b6133e1838383613306565b505050565b60008101600083016133f88185612e7a565b61340381838661315a565b5050505060018101602083018061341981613193565b9050613425818461321a565b505050600281016040830161343a818561323d565b6134458183866133d6565b505050505050565b61345782826133e6565b5050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006134b760258361240d565b91506134c28261345b565b604082019050919050565b600060208201905081810360008301526134e6816134aa565b9050919050565b7f76616c696461746f72206973206e6f742073657420666f72207468697320726560008201527f7175657374206964000000000000000000000000000000000000000000000000602082015250565b600061354960288361240d565b9150613554826134ed565b604082019050919050565b600060208201905081810360008301526135788161353c565b9050919050565b7f7265717565737420696420646f65736e27742065786973740000000000000000600082015250565b60006135b560188361240d565b91506135c08261357f565b602082019050919050565b600060208201905081810360008301526135e4816135a8565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061364760268361240d565b9150613652826135eb565b604082019050919050565b600060208201905081810360008301526136768161363a565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006136d960248361240d565b91506136e48261367d565b604082019050919050565b60006020820190508181036000830152613708816136cc565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061376b60228361240d565b91506137768261370f565b604082019050919050565b6000602082019050818103600083015261379a8161375e565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006137d7601d8361240d565b91506137e2826137a1565b602082019050919050565b60006020820190508181036000830152613806816137ca565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061386960258361240d565b91506138748261380d565b604082019050919050565b600060208201905081810360008301526138988161385c565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006138fb60238361240d565b91506139068261389f565b604082019050919050565b6000602082019050818103600083015261392a816138ee565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061398d60268361240d565b915061399882613931565b604082019050919050565b600060208201905081810360008301526139bc81613980565b9050919050565b7f4c656e6774682073686f756c642062652067726561746572207468616e203000600082015250565b60006139f9601f8361240d565b9150613a04826139c3565b602082019050919050565b60006020820190508181036000830152613a28816139ec565b9050919050565b7f4c656e677468206c696d69742065786365656465640000000000000000000000600082015250565b6000613a6560158361240d565b9150613a7082613a2f565b602082019050919050565b60006020820190508181036000830152613a9481613a58565b9050919050565b7f537461727420696e646578206f7574206f6620626f756e647300000000000000600082015250565b6000613ad160198361240d565b9150613adc82613a9b565b602082019050919050565b60006020820190508181036000830152613b0081613ac4565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613b3d60208361240d565b9150613b4882613b07565b602082019050919050565b60006020820190508181036000830152613b6c81613b30565b9050919050565b7f6368616c6c656e67650000000000000000000000000000000000000000000000600082015250565b6000613ba960098361240d565b9150613bb482613b73565b602082019050919050565b60006020820190508181036000830152613bd881613b9c565b9050919050565b600081519050613bee81612526565b92915050565b600060208284031215613c0a57613c096124b4565b5b6000613c1884828501613bdf565b91505092915050565b7f6164647265737320696e2070726f6f66206973206e6f7420612073656e64657260008201527f2061646472657373000000000000000000000000000000000000000000000000602082015250565b6000613c7d60288361240d565b9150613c8882613c21565b604082019050919050565b60006020820190508181036000830152613cac81613c70565b9050919050565b600082825260208201905092915050565b600080fd5b82818337505050565b6000613cde8385613cb3565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115613d1157613d10613cc4565b5b602083029250613d22838584613cc9565b82840190509392505050565b613d3a60408383613cc9565b5050565b600060029050919050565b600081905092915050565b6000819050919050565b613d6a60408383613cc9565b5050565b6000613d7a8383613d5e565b60408301905092915050565b600082905092915050565b6000604082019050919050565b613da781613d3e565b613db18184613d49565b9250613dbc82613d54565b8060005b83811015613df557613dd28284613d86565b613ddc8782613d6e565b9650613de783613d91565b925050600181019050613dc0565b505050505050565b600082825260208201905092915050565b6000613e19826127e8565b613e238185613dfd565b9350613e3381856020860161241e565b613e3c81612448565b840191505092915050565b6000610140820190508181036000830152613e6381888a613cd2565b9050613e726020830187613d2e565b613e7f6060830186613d9e565b613e8c60e0830185613d2e565b818103610120830152613e9f8184613e0e565b9050979650505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b613ef3613eee82613eac565b613ed8565b82525050565b600081905092915050565b6000613f0f826127e8565b613f198185613ef9565b9350613f2981856020860161241e565b80840191505092915050565b60008160601b9050919050565b6000613f4d82613f35565b9050919050565b6000613f5f82613f42565b9050919050565b613f77613f72826124de565b613f54565b82525050565b6000613f898286613ee2565b600482019150613f998285613f04565b9150613fa58284613f66565b601482019150819050949350505050565b6000613fc28284613f04565b915081905092915050565b7f4661696c656420746f207665726966792070726f6f6620776974686f7574207260008201527f657665727420726561736f6e0000000000000000000000000000000000000000602082015250565b6000614029602c8361240d565b915061403482613fcd565b604082019050919050565b600060208201905081810360008301526140588161401c565b9050919050565b7f70726f6f662063616e206e6f74206265207375626d6974746564206d6f72652060008201527f7468616e206f6e63650000000000000000000000000000000000000000000000602082015250565b60006140bb60298361240d565b91506140c68261405f565b604082019050919050565b600060208201905081810360008301526140ea816140ae565b9050919050565b7f6f6e6c79206964656e7469746965732077686f2070726f76696465642070726f60008201527f6f662061726520616c6c6f77656420746f207265636569766520746f6b656e73602082015250565b600061414d60408361240d565b9150614158826140f1565b604082019050919050565b6000602082019050818103600083015261417c81614140565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006141b9601f8361240d565b91506141c482614183565b602082019050919050565b600060208201905081810360008301526141e8816141ac565b905091905056fea2646970667358221220bf0845f6fd3d062159b2cb83618e2698dae253a1b6928f8ee0449d0a43a25c5f64736f6c63430008100033",
}

// Erc20verifierABI is the input ABI used to generate the binding from.
// Deprecated: Use Erc20verifierMetaData.ABI instead.
var Erc20verifierABI = Erc20verifierMetaData.ABI

// Erc20verifierBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use Erc20verifierMetaData.Bin instead.
var Erc20verifierBin = Erc20verifierMetaData.Bin

// DeployErc20verifier deploys a new Ethereum contract, binding an instance of Erc20verifier to it.
func DeployErc20verifier(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string) (common.Address, *types.Transaction, *Erc20verifier, error) {
	parsed, err := Erc20verifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Erc20verifierBin), backend, name_, symbol_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Erc20verifier{Erc20verifierCaller: Erc20verifierCaller{contract: contract}, Erc20verifierTransactor: Erc20verifierTransactor{contract: contract}, Erc20verifierFilterer: Erc20verifierFilterer{contract: contract}}, nil
}

// Erc20verifier is an auto generated Go binding around an Ethereum contract.
type Erc20verifier struct {
	Erc20verifierCaller     // Read-only binding to the contract
	Erc20verifierTransactor // Write-only binding to the contract
	Erc20verifierFilterer   // Log filterer for contract events
}

// Erc20verifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type Erc20verifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20verifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type Erc20verifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20verifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Erc20verifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20verifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Erc20verifierSession struct {
	Contract     *Erc20verifier    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Erc20verifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Erc20verifierCallerSession struct {
	Contract *Erc20verifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// Erc20verifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Erc20verifierTransactorSession struct {
	Contract     *Erc20verifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// Erc20verifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type Erc20verifierRaw struct {
	Contract *Erc20verifier // Generic contract binding to access the raw methods on
}

// Erc20verifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Erc20verifierCallerRaw struct {
	Contract *Erc20verifierCaller // Generic read-only contract binding to access the raw methods on
}

// Erc20verifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Erc20verifierTransactorRaw struct {
	Contract *Erc20verifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewErc20verifier creates a new instance of Erc20verifier, bound to a specific deployed contract.
func NewErc20verifier(address common.Address, backend bind.ContractBackend) (*Erc20verifier, error) {
	contract, err := bindErc20verifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Erc20verifier{Erc20verifierCaller: Erc20verifierCaller{contract: contract}, Erc20verifierTransactor: Erc20verifierTransactor{contract: contract}, Erc20verifierFilterer: Erc20verifierFilterer{contract: contract}}, nil
}

// NewErc20verifierCaller creates a new read-only instance of Erc20verifier, bound to a specific deployed contract.
func NewErc20verifierCaller(address common.Address, caller bind.ContractCaller) (*Erc20verifierCaller, error) {
	contract, err := bindErc20verifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Erc20verifierCaller{contract: contract}, nil
}

// NewErc20verifierTransactor creates a new write-only instance of Erc20verifier, bound to a specific deployed contract.
func NewErc20verifierTransactor(address common.Address, transactor bind.ContractTransactor) (*Erc20verifierTransactor, error) {
	contract, err := bindErc20verifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Erc20verifierTransactor{contract: contract}, nil
}

// NewErc20verifierFilterer creates a new log filterer instance of Erc20verifier, bound to a specific deployed contract.
func NewErc20verifierFilterer(address common.Address, filterer bind.ContractFilterer) (*Erc20verifierFilterer, error) {
	contract, err := bindErc20verifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Erc20verifierFilterer{contract: contract}, nil
}

// bindErc20verifier binds a generic wrapper to an already deployed contract.
func bindErc20verifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := Erc20verifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Erc20verifier *Erc20verifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Erc20verifier.Contract.Erc20verifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Erc20verifier *Erc20verifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc20verifier.Contract.Erc20verifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Erc20verifier *Erc20verifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Erc20verifier.Contract.Erc20verifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Erc20verifier *Erc20verifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Erc20verifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Erc20verifier *Erc20verifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc20verifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Erc20verifier *Erc20verifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Erc20verifier.Contract.contract.Transact(opts, method, params...)
}

// REQUESTSRETURNLIMIT is a free data retrieval call binding the contract method 0x1905e7b1.
//
// Solidity: function REQUESTS_RETURN_LIMIT() view returns(uint256)
func (_Erc20verifier *Erc20verifierCaller) REQUESTSRETURNLIMIT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Erc20verifier.contract.Call(opts, &out, "REQUESTS_RETURN_LIMIT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// REQUESTSRETURNLIMIT is a free data retrieval call binding the contract method 0x1905e7b1.
//
// Solidity: function REQUESTS_RETURN_LIMIT() view returns(uint256)
func (_Erc20verifier *Erc20verifierSession) REQUESTSRETURNLIMIT() (*big.Int, error) {
	return _Erc20verifier.Contract.REQUESTSRETURNLIMIT(&_Erc20verifier.CallOpts)
}

// REQUESTSRETURNLIMIT is a free data retrieval call binding the contract method 0x1905e7b1.
//
// Solidity: function REQUESTS_RETURN_LIMIT() view returns(uint256)
func (_Erc20verifier *Erc20verifierCallerSession) REQUESTSRETURNLIMIT() (*big.Int, error) {
	return _Erc20verifier.Contract.REQUESTSRETURNLIMIT(&_Erc20verifier.CallOpts)
}

// TOKENAMOUNTFORAIRDROPPERID is a free data retrieval call binding the contract method 0x7042f36b.
//
// Solidity: function TOKEN_AMOUNT_FOR_AIRDROP_PER_ID() view returns(uint256)
func (_Erc20verifier *Erc20verifierCaller) TOKENAMOUNTFORAIRDROPPERID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Erc20verifier.contract.Call(opts, &out, "TOKEN_AMOUNT_FOR_AIRDROP_PER_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TOKENAMOUNTFORAIRDROPPERID is a free data retrieval call binding the contract method 0x7042f36b.
//
// Solidity: function TOKEN_AMOUNT_FOR_AIRDROP_PER_ID() view returns(uint256)
func (_Erc20verifier *Erc20verifierSession) TOKENAMOUNTFORAIRDROPPERID() (*big.Int, error) {
	return _Erc20verifier.Contract.TOKENAMOUNTFORAIRDROPPERID(&_Erc20verifier.CallOpts)
}

// TOKENAMOUNTFORAIRDROPPERID is a free data retrieval call binding the contract method 0x7042f36b.
//
// Solidity: function TOKEN_AMOUNT_FOR_AIRDROP_PER_ID() view returns(uint256)
func (_Erc20verifier *Erc20verifierCallerSession) TOKENAMOUNTFORAIRDROPPERID() (*big.Int, error) {
	return _Erc20verifier.Contract.TOKENAMOUNTFORAIRDROPPERID(&_Erc20verifier.CallOpts)
}

// TRANSFERREQUESTID is a free data retrieval call binding the contract method 0x63ec508f.
//
// Solidity: function TRANSFER_REQUEST_ID() view returns(uint64)
func (_Erc20verifier *Erc20verifierCaller) TRANSFERREQUESTID(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Erc20verifier.contract.Call(opts, &out, "TRANSFER_REQUEST_ID")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// TRANSFERREQUESTID is a free data retrieval call binding the contract method 0x63ec508f.
//
// Solidity: function TRANSFER_REQUEST_ID() view returns(uint64)
func (_Erc20verifier *Erc20verifierSession) TRANSFERREQUESTID() (uint64, error) {
	return _Erc20verifier.Contract.TRANSFERREQUESTID(&_Erc20verifier.CallOpts)
}

// TRANSFERREQUESTID is a free data retrieval call binding the contract method 0x63ec508f.
//
// Solidity: function TRANSFER_REQUEST_ID() view returns(uint64)
func (_Erc20verifier *Erc20verifierCallerSession) TRANSFERREQUESTID() (uint64, error) {
	return _Erc20verifier.Contract.TRANSFERREQUESTID(&_Erc20verifier.CallOpts)
}

// AddressToId is a free data retrieval call binding the contract method 0xcb0e0d7d.
//
// Solidity: function addressToId(address ) view returns(uint256)
func (_Erc20verifier *Erc20verifierCaller) AddressToId(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Erc20verifier.contract.Call(opts, &out, "addressToId", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AddressToId is a free data retrieval call binding the contract method 0xcb0e0d7d.
//
// Solidity: function addressToId(address ) view returns(uint256)
func (_Erc20verifier *Erc20verifierSession) AddressToId(arg0 common.Address) (*big.Int, error) {
	return _Erc20verifier.Contract.AddressToId(&_Erc20verifier.CallOpts, arg0)
}

// AddressToId is a free data retrieval call binding the contract method 0xcb0e0d7d.
//
// Solidity: function addressToId(address ) view returns(uint256)
func (_Erc20verifier *Erc20verifierCallerSession) AddressToId(arg0 common.Address) (*big.Int, error) {
	return _Erc20verifier.Contract.AddressToId(&_Erc20verifier.CallOpts, arg0)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Erc20verifier *Erc20verifierCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Erc20verifier.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Erc20verifier *Erc20verifierSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Erc20verifier.Contract.Allowance(&_Erc20verifier.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Erc20verifier *Erc20verifierCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Erc20verifier.Contract.Allowance(&_Erc20verifier.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Erc20verifier *Erc20verifierCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Erc20verifier.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Erc20verifier *Erc20verifierSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Erc20verifier.Contract.BalanceOf(&_Erc20verifier.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Erc20verifier *Erc20verifierCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Erc20verifier.Contract.BalanceOf(&_Erc20verifier.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Erc20verifier *Erc20verifierCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Erc20verifier.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Erc20verifier *Erc20verifierSession) Decimals() (uint8, error) {
	return _Erc20verifier.Contract.Decimals(&_Erc20verifier.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Erc20verifier *Erc20verifierCallerSession) Decimals() (uint8, error) {
	return _Erc20verifier.Contract.Decimals(&_Erc20verifier.CallOpts)
}

// GetZKPRequest is a free data retrieval call binding the contract method 0xc76d0845.
//
// Solidity: function getZKPRequest(uint64 requestId) view returns((string,address,bytes))
func (_Erc20verifier *Erc20verifierCaller) GetZKPRequest(opts *bind.CallOpts, requestId uint64) (IZKPVerifierZKPRequest, error) {
	var out []interface{}
	err := _Erc20verifier.contract.Call(opts, &out, "getZKPRequest", requestId)

	if err != nil {
		return *new(IZKPVerifierZKPRequest), err
	}

	out0 := *abi.ConvertType(out[0], new(IZKPVerifierZKPRequest)).(*IZKPVerifierZKPRequest)

	return out0, err

}

// GetZKPRequest is a free data retrieval call binding the contract method 0xc76d0845.
//
// Solidity: function getZKPRequest(uint64 requestId) view returns((string,address,bytes))
func (_Erc20verifier *Erc20verifierSession) GetZKPRequest(requestId uint64) (IZKPVerifierZKPRequest, error) {
	return _Erc20verifier.Contract.GetZKPRequest(&_Erc20verifier.CallOpts, requestId)
}

// GetZKPRequest is a free data retrieval call binding the contract method 0xc76d0845.
//
// Solidity: function getZKPRequest(uint64 requestId) view returns((string,address,bytes))
func (_Erc20verifier *Erc20verifierCallerSession) GetZKPRequest(requestId uint64) (IZKPVerifierZKPRequest, error) {
	return _Erc20verifier.Contract.GetZKPRequest(&_Erc20verifier.CallOpts, requestId)
}

// GetZKPRequests is a free data retrieval call binding the contract method 0x5f9e60d7.
//
// Solidity: function getZKPRequests(uint256 startIndex, uint256 length) view returns((string,address,bytes)[])
func (_Erc20verifier *Erc20verifierCaller) GetZKPRequests(opts *bind.CallOpts, startIndex *big.Int, length *big.Int) ([]IZKPVerifierZKPRequest, error) {
	var out []interface{}
	err := _Erc20verifier.contract.Call(opts, &out, "getZKPRequests", startIndex, length)

	if err != nil {
		return *new([]IZKPVerifierZKPRequest), err
	}

	out0 := *abi.ConvertType(out[0], new([]IZKPVerifierZKPRequest)).(*[]IZKPVerifierZKPRequest)

	return out0, err

}

// GetZKPRequests is a free data retrieval call binding the contract method 0x5f9e60d7.
//
// Solidity: function getZKPRequests(uint256 startIndex, uint256 length) view returns((string,address,bytes)[])
func (_Erc20verifier *Erc20verifierSession) GetZKPRequests(startIndex *big.Int, length *big.Int) ([]IZKPVerifierZKPRequest, error) {
	return _Erc20verifier.Contract.GetZKPRequests(&_Erc20verifier.CallOpts, startIndex, length)
}

// GetZKPRequests is a free data retrieval call binding the contract method 0x5f9e60d7.
//
// Solidity: function getZKPRequests(uint256 startIndex, uint256 length) view returns((string,address,bytes)[])
func (_Erc20verifier *Erc20verifierCallerSession) GetZKPRequests(startIndex *big.Int, length *big.Int) ([]IZKPVerifierZKPRequest, error) {
	return _Erc20verifier.Contract.GetZKPRequests(&_Erc20verifier.CallOpts, startIndex, length)
}

// GetZKPRequestsCount is a free data retrieval call binding the contract method 0x6508e1b4.
//
// Solidity: function getZKPRequestsCount() view returns(uint256)
func (_Erc20verifier *Erc20verifierCaller) GetZKPRequestsCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Erc20verifier.contract.Call(opts, &out, "getZKPRequestsCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetZKPRequestsCount is a free data retrieval call binding the contract method 0x6508e1b4.
//
// Solidity: function getZKPRequestsCount() view returns(uint256)
func (_Erc20verifier *Erc20verifierSession) GetZKPRequestsCount() (*big.Int, error) {
	return _Erc20verifier.Contract.GetZKPRequestsCount(&_Erc20verifier.CallOpts)
}

// GetZKPRequestsCount is a free data retrieval call binding the contract method 0x6508e1b4.
//
// Solidity: function getZKPRequestsCount() view returns(uint256)
func (_Erc20verifier *Erc20verifierCallerSession) GetZKPRequestsCount() (*big.Int, error) {
	return _Erc20verifier.Contract.GetZKPRequestsCount(&_Erc20verifier.CallOpts)
}

// IdToAddress is a free data retrieval call binding the contract method 0x2a2d0c47.
//
// Solidity: function idToAddress(uint256 ) view returns(address)
func (_Erc20verifier *Erc20verifierCaller) IdToAddress(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Erc20verifier.contract.Call(opts, &out, "idToAddress", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IdToAddress is a free data retrieval call binding the contract method 0x2a2d0c47.
//
// Solidity: function idToAddress(uint256 ) view returns(address)
func (_Erc20verifier *Erc20verifierSession) IdToAddress(arg0 *big.Int) (common.Address, error) {
	return _Erc20verifier.Contract.IdToAddress(&_Erc20verifier.CallOpts, arg0)
}

// IdToAddress is a free data retrieval call binding the contract method 0x2a2d0c47.
//
// Solidity: function idToAddress(uint256 ) view returns(address)
func (_Erc20verifier *Erc20verifierCallerSession) IdToAddress(arg0 *big.Int) (common.Address, error) {
	return _Erc20verifier.Contract.IdToAddress(&_Erc20verifier.CallOpts, arg0)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Erc20verifier *Erc20verifierCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Erc20verifier.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Erc20verifier *Erc20verifierSession) Name() (string, error) {
	return _Erc20verifier.Contract.Name(&_Erc20verifier.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Erc20verifier *Erc20verifierCallerSession) Name() (string, error) {
	return _Erc20verifier.Contract.Name(&_Erc20verifier.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20verifier *Erc20verifierCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Erc20verifier.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20verifier *Erc20verifierSession) Owner() (common.Address, error) {
	return _Erc20verifier.Contract.Owner(&_Erc20verifier.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20verifier *Erc20verifierCallerSession) Owner() (common.Address, error) {
	return _Erc20verifier.Contract.Owner(&_Erc20verifier.CallOpts)
}

// Proofs is a free data retrieval call binding the contract method 0xb45c0fdf.
//
// Solidity: function proofs(address , uint64 ) view returns(bool)
func (_Erc20verifier *Erc20verifierCaller) Proofs(opts *bind.CallOpts, arg0 common.Address, arg1 uint64) (bool, error) {
	var out []interface{}
	err := _Erc20verifier.contract.Call(opts, &out, "proofs", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Proofs is a free data retrieval call binding the contract method 0xb45c0fdf.
//
// Solidity: function proofs(address , uint64 ) view returns(bool)
func (_Erc20verifier *Erc20verifierSession) Proofs(arg0 common.Address, arg1 uint64) (bool, error) {
	return _Erc20verifier.Contract.Proofs(&_Erc20verifier.CallOpts, arg0, arg1)
}

// Proofs is a free data retrieval call binding the contract method 0xb45c0fdf.
//
// Solidity: function proofs(address , uint64 ) view returns(bool)
func (_Erc20verifier *Erc20verifierCallerSession) Proofs(arg0 common.Address, arg1 uint64) (bool, error) {
	return _Erc20verifier.Contract.Proofs(&_Erc20verifier.CallOpts, arg0, arg1)
}

// RequestIdExists is a free data retrieval call binding the contract method 0xab7bcfb7.
//
// Solidity: function requestIdExists(uint64 requestId) view returns(bool)
func (_Erc20verifier *Erc20verifierCaller) RequestIdExists(opts *bind.CallOpts, requestId uint64) (bool, error) {
	var out []interface{}
	err := _Erc20verifier.contract.Call(opts, &out, "requestIdExists", requestId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// RequestIdExists is a free data retrieval call binding the contract method 0xab7bcfb7.
//
// Solidity: function requestIdExists(uint64 requestId) view returns(bool)
func (_Erc20verifier *Erc20verifierSession) RequestIdExists(requestId uint64) (bool, error) {
	return _Erc20verifier.Contract.RequestIdExists(&_Erc20verifier.CallOpts, requestId)
}

// RequestIdExists is a free data retrieval call binding the contract method 0xab7bcfb7.
//
// Solidity: function requestIdExists(uint64 requestId) view returns(bool)
func (_Erc20verifier *Erc20verifierCallerSession) RequestIdExists(requestId uint64) (bool, error) {
	return _Erc20verifier.Contract.RequestIdExists(&_Erc20verifier.CallOpts, requestId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Erc20verifier *Erc20verifierCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Erc20verifier.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Erc20verifier *Erc20verifierSession) Symbol() (string, error) {
	return _Erc20verifier.Contract.Symbol(&_Erc20verifier.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Erc20verifier *Erc20verifierCallerSession) Symbol() (string, error) {
	return _Erc20verifier.Contract.Symbol(&_Erc20verifier.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Erc20verifier *Erc20verifierCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Erc20verifier.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Erc20verifier *Erc20verifierSession) TotalSupply() (*big.Int, error) {
	return _Erc20verifier.Contract.TotalSupply(&_Erc20verifier.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Erc20verifier *Erc20verifierCallerSession) TotalSupply() (*big.Int, error) {
	return _Erc20verifier.Contract.TotalSupply(&_Erc20verifier.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Erc20verifier *Erc20verifierTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Erc20verifier.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Erc20verifier *Erc20verifierSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Erc20verifier.Contract.Approve(&_Erc20verifier.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Erc20verifier *Erc20verifierTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Erc20verifier.Contract.Approve(&_Erc20verifier.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Erc20verifier *Erc20verifierTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Erc20verifier.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Erc20verifier *Erc20verifierSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Erc20verifier.Contract.DecreaseAllowance(&_Erc20verifier.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Erc20verifier *Erc20verifierTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Erc20verifier.Contract.DecreaseAllowance(&_Erc20verifier.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Erc20verifier *Erc20verifierTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Erc20verifier.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Erc20verifier *Erc20verifierSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Erc20verifier.Contract.IncreaseAllowance(&_Erc20verifier.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Erc20verifier *Erc20verifierTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Erc20verifier.Contract.IncreaseAllowance(&_Erc20verifier.TransactOpts, spender, addedValue)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Erc20verifier *Erc20verifierTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc20verifier.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Erc20verifier *Erc20verifierSession) RenounceOwnership() (*types.Transaction, error) {
	return _Erc20verifier.Contract.RenounceOwnership(&_Erc20verifier.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Erc20verifier *Erc20verifierTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Erc20verifier.Contract.RenounceOwnership(&_Erc20verifier.TransactOpts)
}

// SetZKPRequest is a paid mutator transaction binding the contract method 0x9f5223e0.
//
// Solidity: function setZKPRequest(uint64 requestId, (string,address,bytes) request) returns()
func (_Erc20verifier *Erc20verifierTransactor) SetZKPRequest(opts *bind.TransactOpts, requestId uint64, request IZKPVerifierZKPRequest) (*types.Transaction, error) {
	return _Erc20verifier.contract.Transact(opts, "setZKPRequest", requestId, request)
}

// SetZKPRequest is a paid mutator transaction binding the contract method 0x9f5223e0.
//
// Solidity: function setZKPRequest(uint64 requestId, (string,address,bytes) request) returns()
func (_Erc20verifier *Erc20verifierSession) SetZKPRequest(requestId uint64, request IZKPVerifierZKPRequest) (*types.Transaction, error) {
	return _Erc20verifier.Contract.SetZKPRequest(&_Erc20verifier.TransactOpts, requestId, request)
}

// SetZKPRequest is a paid mutator transaction binding the contract method 0x9f5223e0.
//
// Solidity: function setZKPRequest(uint64 requestId, (string,address,bytes) request) returns()
func (_Erc20verifier *Erc20verifierTransactorSession) SetZKPRequest(requestId uint64, request IZKPVerifierZKPRequest) (*types.Transaction, error) {
	return _Erc20verifier.Contract.SetZKPRequest(&_Erc20verifier.TransactOpts, requestId, request)
}

// SubmitZKPResponse is a paid mutator transaction binding the contract method 0xb68967e2.
//
// Solidity: function submitZKPResponse(uint64 requestId, uint256[] inputs, uint256[2] a, uint256[2][2] b, uint256[2] c) returns()
func (_Erc20verifier *Erc20verifierTransactor) SubmitZKPResponse(opts *bind.TransactOpts, requestId uint64, inputs []*big.Int, a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int) (*types.Transaction, error) {
	return _Erc20verifier.contract.Transact(opts, "submitZKPResponse", requestId, inputs, a, b, c)
}

// SubmitZKPResponse is a paid mutator transaction binding the contract method 0xb68967e2.
//
// Solidity: function submitZKPResponse(uint64 requestId, uint256[] inputs, uint256[2] a, uint256[2][2] b, uint256[2] c) returns()
func (_Erc20verifier *Erc20verifierSession) SubmitZKPResponse(requestId uint64, inputs []*big.Int, a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int) (*types.Transaction, error) {
	return _Erc20verifier.Contract.SubmitZKPResponse(&_Erc20verifier.TransactOpts, requestId, inputs, a, b, c)
}

// SubmitZKPResponse is a paid mutator transaction binding the contract method 0xb68967e2.
//
// Solidity: function submitZKPResponse(uint64 requestId, uint256[] inputs, uint256[2] a, uint256[2][2] b, uint256[2] c) returns()
func (_Erc20verifier *Erc20verifierTransactorSession) SubmitZKPResponse(requestId uint64, inputs []*big.Int, a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int) (*types.Transaction, error) {
	return _Erc20verifier.Contract.SubmitZKPResponse(&_Erc20verifier.TransactOpts, requestId, inputs, a, b, c)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Erc20verifier *Erc20verifierTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Erc20verifier.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Erc20verifier *Erc20verifierSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Erc20verifier.Contract.Transfer(&_Erc20verifier.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Erc20verifier *Erc20verifierTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Erc20verifier.Contract.Transfer(&_Erc20verifier.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Erc20verifier *Erc20verifierTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Erc20verifier.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Erc20verifier *Erc20verifierSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Erc20verifier.Contract.TransferFrom(&_Erc20verifier.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Erc20verifier *Erc20verifierTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Erc20verifier.Contract.TransferFrom(&_Erc20verifier.TransactOpts, from, to, amount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20verifier *Erc20verifierTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Erc20verifier.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20verifier *Erc20verifierSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Erc20verifier.Contract.TransferOwnership(&_Erc20verifier.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20verifier *Erc20verifierTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Erc20verifier.Contract.TransferOwnership(&_Erc20verifier.TransactOpts, newOwner)
}

// Erc20verifierApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Erc20verifier contract.
type Erc20verifierApprovalIterator struct {
	Event *Erc20verifierApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Erc20verifierApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Erc20verifierApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Erc20verifierApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Erc20verifierApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Erc20verifierApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Erc20verifierApproval represents a Approval event raised by the Erc20verifier contract.
type Erc20verifierApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Erc20verifier *Erc20verifierFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*Erc20verifierApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Erc20verifier.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &Erc20verifierApprovalIterator{contract: _Erc20verifier.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Erc20verifier *Erc20verifierFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *Erc20verifierApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Erc20verifier.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Erc20verifierApproval)
				if err := _Erc20verifier.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Erc20verifier *Erc20verifierFilterer) ParseApproval(log types.Log) (*Erc20verifierApproval, error) {
	event := new(Erc20verifierApproval)
	if err := _Erc20verifier.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Erc20verifierOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Erc20verifier contract.
type Erc20verifierOwnershipTransferredIterator struct {
	Event *Erc20verifierOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Erc20verifierOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Erc20verifierOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Erc20verifierOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Erc20verifierOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Erc20verifierOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Erc20verifierOwnershipTransferred represents a OwnershipTransferred event raised by the Erc20verifier contract.
type Erc20verifierOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20verifier *Erc20verifierFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*Erc20verifierOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Erc20verifier.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &Erc20verifierOwnershipTransferredIterator{contract: _Erc20verifier.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20verifier *Erc20verifierFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *Erc20verifierOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Erc20verifier.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Erc20verifierOwnershipTransferred)
				if err := _Erc20verifier.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20verifier *Erc20verifierFilterer) ParseOwnershipTransferred(log types.Log) (*Erc20verifierOwnershipTransferred, error) {
	event := new(Erc20verifierOwnershipTransferred)
	if err := _Erc20verifier.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Erc20verifierTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Erc20verifier contract.
type Erc20verifierTransferIterator struct {
	Event *Erc20verifierTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Erc20verifierTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Erc20verifierTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Erc20verifierTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Erc20verifierTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Erc20verifierTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Erc20verifierTransfer represents a Transfer event raised by the Erc20verifier contract.
type Erc20verifierTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Erc20verifier *Erc20verifierFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*Erc20verifierTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Erc20verifier.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &Erc20verifierTransferIterator{contract: _Erc20verifier.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Erc20verifier *Erc20verifierFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *Erc20verifierTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Erc20verifier.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Erc20verifierTransfer)
				if err := _Erc20verifier.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Erc20verifier *Erc20verifierFilterer) ParseTransfer(log types.Log) (*Erc20verifierTransfer, error) {
	event := new(Erc20verifierTransfer)
	if err := _Erc20verifier.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
